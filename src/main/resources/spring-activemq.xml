<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:amq="http://activemq.apache.org/schema/core"
        xmlns:jms="http://www.springframework.org/schema/jms"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">


    <!--<jms:annotation-driven/>&lt;!&ndash;&ndash;&gt;-->
       <!-- ActiveMQ 连接工厂 -->
       <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
       <!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码-->
       <amq:connectionFactory id="amqConnectionFactory"
                brokerURL="tcp://localhost:61616" userName="admin" password="admin"  />

       <!-- Spring Caching连接工厂 -->
       <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
       <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
              <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
              <property name="targetConnectionFactory" ref="amqConnectionFactory"></property>
              <!-- 同上，同理 -->
              <!-- <constructor-arg ref="amqConnectionFactory" /> -->
              <!-- Session缓存数量 -->
              <property name="sessionCacheSize" value="100" />
       </bean>
       <!-- 消息处理器 -->
    <bean id="jmsMessageConverter"
          class="org.springframework.jms.support.converter.SimpleMessageConverter" />

       <!-- Spring JmsTemplate 的消息生产者 start-->

       <!-- 定义JmsTemplate的Queue类型 -->
       <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
              <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
              <constructor-arg ref="connectionFactory" />
              <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
              <property name="pubSubDomain" value="false" />
              <property name="messageConverter" ref="jmsMessageConverter"></property>
       </bean>

       <!-- 定义JmsTemplate的Topic类型 -->
      <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
              <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
              <constructor-arg ref="connectionFactory" />
              <!-- pub/sub模型（发布/订阅） -->
              <property name="pubSubDomain" value="true" />
              <property name="messageConverter" ref="jmsMessageConverter"></property>
       </bean>
      <!--&lt;!&ndash; 监听注解支持 &ndash;&gt;-->
      <!--<bean id="jmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
    <!--</bean>-->

       <!--Spring JmsTemplate 的消息生产者 end-->


       <!-- 消息消费者 start-->

    <!-- xml定义Queue监听器 -->
    <jms:listener-container destination-type="queue" container-type="default"
                               connection-factory="connectionFactory" acknowledge="client"
                                concurrency="1">
              <jms:listener destination="myqueue1Success2" ref="queueConsumer1Back"/>
              <jms:listener destination="test.queue" ref="queueConsumer2"/>
       </jms:listener-container>

    <!-- xml定义Topic监听器 -->
       <jms:listener-container destination-type="topic" container-type="default"
                               connection-factory="connectionFactory" acknowledge="auto"
                               concurrency="1">
              <!--<jms:listener destination="test.topic" ref="topicConsumer1"/>-->
              <jms:listener destination="test.topic" ref="topicConsumer2"/>
       </jms:listener-container>

    <!-- 消息消费者 end -->

     <!--自定义监听 -->

    <!--这个是QueueConsumer1点对点队列目的地-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 构造方法注入点对点监听地址-->
        <constructor-arg>
            <value>myqueue1</value>
        </constructor-arg>
    </bean>
    <!--这个是QueueConsumer1点对点队列消息成功接收返回目的地-->
    <bean id="queueDestinationBack" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 注入点对点监听地址-->
        <constructor-arg>
            <value>myqueue1Success2</value>
        </constructor-arg>
    </bean>
    <bean id="myConsumerListener1" class="sys.amq.consumer.QueueConsumer1">
        <!-- 不直接写name,而是引入对象Destination,方便区分queue和topic-->
        <property name="destination" ref="queueDestinationBack"/>
    </bean>
    <!-- 监听容器-->
    <bean id="myListenerContainer"

          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <!-- 消息监听地址-->
        <property name="destination" ref="queueDestination" />

        <property name="sessionAcknowledgeMode" value="2"></property>
        <!-- 监听指定 -->
        <property name="messageListener" ref="myConsumerListener1" />
    </bean>
</beans>